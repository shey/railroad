## {{ ansible_managed }}

# What ports/sockets to listen on, and what options for them.
listen "3000", {"tcp_nopush"=>true}

working_directory '/home/{{ app_user }}/{{ app_name }}/current'

# What the timeout for killing busy workers is, in seconds
timeout 30

# Whether the app should be pre-loaded
preload_app true

# How many worker processes
worker_processes {{3|int}}


# What to do right before exec()-ing the new unicorn binary
before_exec do |server|
  ENV["BUNDLE_GEMFILE"] = "/home/{{ app_user }}/{{ app_name }}/current/Gemfile"
  require 'dotenv'
  ENV.update Dotenv::Environment.new('.env')
end


# What to do before we fork a worker
before_fork do |server, worker|
  # master process doesn't need to hold a connection
  defined?(ActiveRecord::Base) and ActiveRecord::Base.connection.disconnect!

  # NOTE: adapteed from http://bogomips.org/unicorn.git/tree/examples/unicorn.conf.rb
  # The following is only recommended for memory/DB-constrained
  # installations.  It is not needed if your system can house
  # twice as many worker_processes as you have configured.
  #
  # This allows a new master process to incrementally
  # phase out the old master process with SIGTTOU to avoid a
  # thundering herd (especially in the "preload_app false" case)
  # when doing a transparent upgrade.  The last worker spawned
  # will then kill off the old master process with a SIGQUIT.
  old_pid = "#{server.config[:pid]}.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end

  # Throttle the master from forking too quickly by sleeping.  Due
  # to the implementation of standard Unix signal handlers, this
  # helps (but does not completely) prevent identical, repeated signals
  # from being lost when the receiving process is busy.
  sleep 1
end

# What to do after we fork a worker
after_fork do |server, worker|
  SemanticLogger.reopen

  defined?(ActiveRecord::Base) && ActiveRecord::Base.establish_connection

  system "echo #{Process.pid} > /home/{{ app_user }}/{{ app_name }}/shared/pids/unicorn_worker.#{worker.nr}.pid"
end

# Where to drop a pidfile
pid '/home/{{ app_user }}/{{ app_name }}/shared/pids/unicorn.pid'
